<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>uwsgi on Malu Blog</title>
    <link>https://malu.ome/tags/uwsgi/</link>
    <description>Recent content in uwsgi on Malu Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 01 May 2018 19:09:22 +0000</lastBuildDate><atom:link href="https://malu.ome/tags/uwsgi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用uwsgi 和 nginx 部署 Flask</title>
      <link>https://malu.ome/post/%E4%BD%BF%E7%94%A8uwsgi-%E5%92%8C-nginx-%E9%83%A8%E7%BD%B2-flask/</link>
      <pubDate>Tue, 01 May 2018 19:09:22 +0000</pubDate>
      
      <guid>https://malu.ome/post/%E4%BD%BF%E7%94%A8uwsgi-%E5%92%8C-nginx-%E9%83%A8%E7%BD%B2-flask/</guid>
      <description>​	之前使用了 gunicorn 来部署 Flask 应用,但是感觉 nginx 会不会更快一些, 于是就有了尝试使用 uwsgi 配合 nginx 来部署 Flask 的想法.
​	但是看了一些文章之后感觉速度应该是一样的, 后端都是 Python, 但是有人说 Nginx 更安全. 静态页面的支持也更好, 所以也配置玩一下顺便测试一下静态的并发量.
​	首先安装uWSGI, 使用pip来安装
pip install uwsgi 在 Flask 应用的目录下测试 uwsgi 是否工作
1  uwsgi --socket 0.0.0.0:8000 --protocol=http -w run:app   这时候打开 127.0.0.1:8000 就可以看到 网站的首页了.
接着我们配置真正配合 nginx 使用的 uwsgi 配置.
在 Flask 应用目录下新建一个文件 config.ini 作为uwsgi 的配置文件
[uwsgi] master = true wsgi-file = run.py callable = app chmod-socker = 777 socket = 127.</description>
    </item>
    
  </channel>
</rss>
